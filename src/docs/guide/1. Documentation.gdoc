This plugin adds an annotation on Enums to easy add and implement the MessageSourceResolvable interface. It was heavily inspired by this blog-entry by Rob Fletcher: ][http://adhockery.blogspot.dk/2009/03/internationalizing-domain-classes-and.html]

h3. v1.0.1
Precompiles the AST transformation, otherwise Grails will not pick them up when compiling other artefacts.

h3. v1.0.0
Now support configuration in Config.groovy - see documentation below

h3. v0.9.7
A large rewrite of the plugin. One new DefaultNameCase enum value: ALL_CAPS, will remove underscores in the enumeration and will capitalize each word. 
The EnumSourceResolvableTransformation now delegates all work to the EnumResourceResolvableHelper and the helper will (in the next release) be configurable from Config.groovy
{warning}
The package name for the annotation has changed 
from 
{code}
dk.glasius.annotations
{code}
to
{code}
grails.plugin.i18nEnum.annotations
{code}
{warning}
h3. v0.9.5
Now you can make your own implementations of one or more of the methods in the MessageSourceResolvable interface. You still do not have to implement MessageSourceResolvable, just implement the methods getDefaultMessage(), getCodes() and getArguments()

h2. If you use it, let me know

If you use this plugin in your application, let me know - it's always nice to know, when ones work is used in the wild.
Send me a tweet to \@sbglasius or send me an email to soeren\@glasius.dk - thank you!

h2. Installation

In your BuildConfig.groovy insert:

{code}
compile ':i18n-enums:1.0.0'
{code}

h2. Basic usage

You just annotate your ennumeration with @I18nEnum

{code}
package test

@I18nEnum
enum MyEnum {
    ONE, Two, three
}
{code}

will generate the following codes for each enum:
{code}
test.MyEnum.ONE.codes   == ['test.MyEnum.ONE',   'test.MyEnum.ONE',   'test.MyEnum.one']
test.MyEnum.Two.codes   == ['test.MyEnum.TWO',   'test.MyEnum.Two',   'test.MyEnum.two']
test.MyEnum.three.codes == ['test.MyEnum.THREE', 'test.MyEnum.three', 'test.MyEnum.three']
{code}

And the following default values: 
{code}
test.MyEnum.ONE.defaultMessage == 'ONE'
test.MyEnum.Two.defaultMessage == 'Two'
test.MyEnum.three.defaultMessage == 'three'
{code}

as it can be seen, the codes comes in three variations: UPPER_CASE, UNCHANGED and LOWER_CASE, and the default message is
simply the Enum value

h2. Advanced usage

To get even more control over, how the codes and the default value are generated, you can add parameters to the annotation:

{code}
@I18nEnum(prefix = '', postfix = '', shortName = false, defaultNameCase = DefaultNameCase.UNCHANGED)
{code}


h3. Prefix and Postfix

Prefix controls what is added before the package name. If you do not add a dot after the prefix, one will be added for you. 

Postfix controls what is added after the ENUM_VALUE. If you do not add a dot before the postfix, one will be added for you.

h4. Example:
{code}
package test

@I18nEnum(prefix = 'enum', postfix = 'label')
enum MyEnum {
    ONE, Two, three
}
{code}

will generate the following codes for each enum:
{code}
test.MyEnum.ONE.codes ==   ['enum.test.MyEnum.ONE.label',   'enum.test.MyEnum.ONE.label',   'enum.test.MyEnum.one.label']
test.MyEnum.Two.codes ==   ['enum.test.MyEnum.TWO.label',   'enum.test.MyEnum.Two.label',   'enum.test.MyEnum.two.label']
test.MyEnum.three.codes == ['enum.test.MyEnum.THREE.label', 'enum.test.MyEnum.three.label', 'enum.test.MyEnum.three.label']
{code}

h3. shortName
If you do not want the package name in the generated codes, just add shortName = true to your annotation parameters

h4. Example:
{code}
package test

@I18nEnum(shortName = true)
enum MyEnum {
    ONE, Two, three
}
{code}

will generate the following codes for each enum:
{code}
test.MyEnum.ONE.codes ==   ['MyEnum.ONE',   'MyEnum.ONE',   'MyEnum.one']
test.MyEnum.Two.codes ==   ['MyEnum.TWO',   'MyEnum.Two',   'MyEnum.two']
test.MyEnum.three.codes == ['MyEnum.THREE', 'MyEnum.three', 'MyEnum.three']
{code}

h3. defaultNameCase
To control the defaultMessage you can use defaultNameCase. It can be set to one of the following values:

{code}
UPPER_CASE, LOWER_CASE, CAPITALIZE, ALL_CAPS, UNCHANGED
{code}

where UNCHANGED is the default.

h4. Example:
h5. DefaultNameCase.CAPITALIZE
{code}
package test

@I18nEnum(defaultNameCase = DefaultNameCase.CAPITALIZE)
enum MyEnum {
    ONE, Two, three
}
{code}

And the following default values:
{code}
test.MyEnum.ONE.defaultMessage == 'One'
test.MyEnum.Two.defaultMessage == 'Two'
test.MyEnum.three.defaultMessage == 'Three'
{code}

h5. DefaultNameCase.ALL_CAPS
{code}
@I18nEnum(defaultNameCase = DefaultNameCase.ALL_CAPS)
enum MyEnum {
    ONE, Two, three, Four_five
}
{code}

And the following default values:
{code}
test.MyEnum.ONE.defaultMessage == 'One'
test.MyEnum.Two.defaultMessage == 'Two'
test.MyEnum.three.defaultMessage == 'Three'
test.MyEnum.Four_five.defaultMessage == 'Four Five'
{code}

h5. DefaultNameCase.LOWER_CASE
{code}
package test

@I18nEnum(defaultNameCase = DefaultNameCase.LOWER_CASE)
enum MyEnum {
    ONE, Two, three
}
{code}

And the following default values:

{code}
test.MyEnum.ONE.defaultMessage == 'one'
test.MyEnum.Two.defaultMessage == 'two'
test.MyEnum.three.defaultMessage == 'three'
{code}

h2. Configuration
It is possible to configure default settings from configuration. 

In Configuration.groovy create a configuration tree like this: 

{code}
import grails.plugin.i18nEnum.transformation.DefaultNameCase

// Your other configuration

grails {
    plugin {
        i18nEnum {
            postfix = "label"
            shortName = true
            defaultNameCase = DefaultNameCase.ALL_CAPS
        }
    }
}
{code}

The settings values are the same as the configuration directives for the annotation.
h2. Changes

h3. v1.0.1
Grails event hook to precompile AST transformations before the rest of the Grails compile phase. This is needed
so that enums annotated will be compiled correctly.

h3. v1.0.0
The plugin was formerly known as *EnumMessageSourceResolvable*, but was renamed to I18nEnums for easier reading and writing. Functionality wise it has not changed from v1.0.0 of EnumMessageSourceResolvable.

Now support configuration in Config.groovy - see documentation below

h3. Previous versions
For previous versions see [EnumMessageSourceResolvable|http://grails.org/plugin/enum-message-source-resolvable]
h2. If you use it, let me know

If you use this plugin in your application, let me know - it's always nice to know, when ones work is used in the wild.
Send me a tweet to \@sbglasius or send me an email to soeren\@glasius.dk - thank you!

h2. License
Licensed under the Apache2.0 license. See http://www.apache.org/licenses/LICENSE-2.0 for more information.
